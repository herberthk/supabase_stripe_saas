DROP TABLE IF EXISTS profile cascade;
create table public.profile (
  name text null,
  email text,
  stripe_customer_id text null,
  subscription_status text null,
  price text null,
  user_id uuid references auth.users not null primary key,
  createdAt timestamp with time zone default timezone('utc'::text, now())
);
-- Function
DROP FUNCTION IF EXISTS handle_create_profile cascade;
create or replace function public.handle_create_profile() 
returns trigger as $$
begin
  insert into public.profile (user_id, email, name, stripe_customer_id, subscription_status, price)
  values (
    new.id, 
    new.email,
    new.raw_user_meta_data->>'name',
    new.raw_user_meta_data->>'stripe_customer_id',
    new.raw_user_meta_data->>'subscription_status',
    new.raw_user_meta_data->>'price'
    )
  ON CONFLICT (user_id) 
  DO 
    UPDATE SET email = new.email;
  return new;
end;
$$ language plpgsql security definer;

-- create a trigger
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row
    execute procedure public.handle_create_profile();


-- Create products table
DROP TABLE IF EXISTS products cascade;
create table public.products (
  name text,
  createdAt timestamp with time zone default timezone('utc'::text, now()),
  slug text,
  description text,
  category text,
  id integer primary key generated by default as identity
  product_content_id integer references product_content.id not null,
)

-- - Create product_content table
DROP TABLE IF EXISTS product_content cascade;
create table public.product_content (
  createdAt timestamp with time zone default timezone('utc'::text, now()),
  vide_url text null,
  download_url text null,
  id integer primary key generated by default as identity
)
